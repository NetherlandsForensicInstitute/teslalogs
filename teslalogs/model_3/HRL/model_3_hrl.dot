digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__model_3_hrl {
		label="Model3Hrl";
		graph[style=dotted];

		model_3_hrl__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="header_pos">0</TD><TD PORT="header_size">...</TD><TD>FirstBlock</TD><TD PORT="header_type">header</TD></TR>
			<TR><TD PORT="blocks_pos">...</TD><TD PORT="blocks_size">header.blocksize</TD><TD>Block</TD><TD PORT="blocks_type">blocks</TD></TR>
			<TR><TD COLSPAN="4" PORT="blocks__repeat">repeat to end of stream</TD></TR>
		</TABLE>>];
		model_3_hrl__inst__recordsize [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
			<TR><TD>recordsize</TD><TD>11</TD></TR>
		</TABLE>>];
		subgraph cluster__unknown_frame {
			label="Model3Hrl::UnknownFrame";
			graph[style=dotted];

			unknown_frame__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="payload_pos">0</TD><TD PORT="payload_size">(_root.recordsize - 1)</TD><TD></TD><TD PORT="payload_type">payload</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__first_block {
			label="Model3Hrl::FirstBlock";
			graph[style=dotted];

			first_block__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="version_pos">0</TD><TD PORT="version_size">1</TD><TD>u1</TD><TD PORT="version_type">version</TD></TR>
				<TR><TD PORT="git_hash_pos">1</TD><TD PORT="git_hash_size">20</TD><TD></TD><TD PORT="git_hash_type">git_hash</TD></TR>
				<TR><TD PORT="vin_pos">21</TD><TD PORT="vin_size">18</TD><TD>str(UTF-8)</TD><TD PORT="vin_type">vin</TD></TR>
				<TR><TD PORT="unknown_pos">39</TD><TD PORT="unknown_size">2</TD><TD>u2be</TD><TD PORT="unknown_type">unknown</TD></TR>
				<TR><TD PORT="start_timestamp_pos">41</TD><TD PORT="start_timestamp_size">4</TD><TD>u4be</TD><TD PORT="start_timestamp_type">start_timestamp</TD></TR>
				<TR><TD PORT="padding_pos">45</TD><TD PORT="padding_size">(blocksize - _io.pos)</TD><TD></TD><TD PORT="padding_type">padding</TD></TR>
			</TABLE>>];
			first_block__inst__blocksize [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>blocksize</TD><TD>(version &lt;= 1 ? 16384 : 32768)</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__block {
			label="Model3Hrl::Block";
			graph[style=dotted];

			block__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="records_pos">0</TD><TD PORT="records_size">_root.recordsize</TD><TD>Record</TD><TD PORT="records_type">records</TD></TR>
				<TR><TD COLSPAN="4" PORT="records__repeat">repeat until i == ((_root.header.blocksize / _root.recordsize) - 1)</TD></TR>
			</TABLE>>];
			block__inst__crc [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="crc_pos">(_root.header.blocksize - (_root.header.blocksize % _root.recordsize))</TD><TD PORT="crc_size">4</TD><TD>u4be</TD><TD PORT="crc_type">crc</TD></TR>
			</TABLE>>];
			block__inst__raw_records [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="raw_records_pos">0</TD><TD PORT="raw_records_size">(_root.header.blocksize - (_root.header.blocksize % _root.recordsize))</TD><TD></TD><TD PORT="raw_records_type">raw_records</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__can_frame {
			label="Model3Hrl::CanFrame";
			graph[style=dotted];

			can_frame__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="bus_id_pos">0</TD><TD PORT="bus_id_size">2b</TD><TD>b2→Buses</TD><TD PORT="bus_id_type">bus_id</TD></TR>
				<TR><TD PORT="dlc_field_pos">0:2</TD><TD PORT="dlc_field_size">3b</TD><TD>b3</TD><TD PORT="dlc_field_type">dlc_field</TD></TR>
				<TR><TD PORT="arb_id_pos">0:5</TD><TD PORT="arb_id_size">11b</TD><TD>b11</TD><TD PORT="arb_id_type">arb_id</TD></TR>
				<TR><TD PORT="data_pos">2</TD><TD PORT="data_size">8</TD><TD></TD><TD PORT="data_type">data</TD></TR>
			</TABLE>>];
			can_frame__inst__dlc [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>dlc</TD><TD>(dlc_field + 1)</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__record {
			label="Model3Hrl::Record";
			graph[style=dotted];

			record__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="flags_pos">0</TD><TD PORT="flags_size">2b</TD><TD>b2→RecordFlags</TD><TD PORT="flags_type">flags</TD></TR>
				<TR><TD PORT="counter_pos">0:2</TD><TD PORT="counter_size">6b</TD><TD>b6</TD><TD PORT="counter_type">counter</TD></TR>
				<TR><TD PORT="payload_pos">1</TD><TD PORT="payload_size">...</TD><TD>switch (flags)</TD><TD PORT="payload_type">payload</TD></TR>
			</TABLE>>];
			record__inst__raw_record [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="raw_record_pos">0</TD><TD PORT="raw_record_size">_root.recordsize</TD><TD></TD><TD PORT="raw_record_type">raw_record</TD></TR>
			</TABLE>>];
			record__inst__end_of_records [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>end_of_records</TD><TD>raw_record == [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255].pack('C*')</TD></TR>
			</TABLE>>];
record__seq_payload_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
	<TR><TD>:record_flags_can_frame</TD><TD PORT="case0">CanFrame</TD></TR>
	<TR><TD>:record_flags_timestamp_frame</TD><TD PORT="case1">TimestampFrame</TD></TR>
	<TR><TD>:record_flags_unknown_frame</TD><TD PORT="case2">UnknownFrame</TD></TR>
</TABLE>>];
		}
		subgraph cluster__timestamp_frame {
			label="Model3Hrl::TimestampFrame";
			graph[style=dotted];

			timestamp_frame__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="milliseconds_from_start_pos">0</TD><TD PORT="milliseconds_from_start_size">4</TD><TD>u4be</TD><TD PORT="milliseconds_from_start_type">milliseconds_from_start</TD></TR>
			</TABLE>>];
		}
	}
	model_3_hrl__seq:header_type -> first_block__seq [style=bold];
	first_block__inst__blocksize:blocksize_type -> model_3_hrl__seq:blocks_size [color="#404040"];
	model_3_hrl__seq:blocks_type -> block__seq [style=bold];
	model_3_hrl__inst__recordsize:recordsize_type -> unknown_frame__seq:payload_size [color="#404040"];
	first_block__inst__blocksize:blocksize_type -> first_block__seq:padding_size [color="#404040"];
	first_block__seq:version_type -> first_block__inst__blocksize [color="#404040"];
	model_3_hrl__inst__recordsize:recordsize_type -> block__seq:records_size [color="#404040"];
	block__seq:records_type -> record__seq [style=bold];
	first_block__inst__blocksize:blocksize_type -> block__seq:records__repeat [color="#404040"];
	model_3_hrl__inst__recordsize:recordsize_type -> block__seq:records__repeat [color="#404040"];
	first_block__inst__blocksize:blocksize_type -> block__inst__crc:crc_pos [color="#404040"];
	first_block__inst__blocksize:blocksize_type -> block__inst__crc:crc_pos [color="#404040"];
	model_3_hrl__inst__recordsize:recordsize_type -> block__inst__crc:crc_pos [color="#404040"];
	first_block__inst__blocksize:blocksize_type -> block__inst__raw_records:raw_records_size [color="#404040"];
	first_block__inst__blocksize:blocksize_type -> block__inst__raw_records:raw_records_size [color="#404040"];
	model_3_hrl__inst__recordsize:recordsize_type -> block__inst__raw_records:raw_records_size [color="#404040"];
	can_frame__seq:dlc_field_type -> can_frame__inst__dlc [color="#404040"];
	record__seq:payload_type -> record__seq_payload_switch [style=bold];
	record__seq_payload_switch:case0 -> can_frame__seq [style=bold];
	record__seq_payload_switch:case1 -> timestamp_frame__seq [style=bold];
	record__seq_payload_switch:case2 -> unknown_frame__seq [style=bold];
	record__seq:flags_type -> record__seq:payload_type [color="#404040"];
	model_3_hrl__inst__recordsize:recordsize_type -> record__inst__raw_record:raw_record_size [color="#404040"];
	record__inst__raw_record:raw_record_type -> record__inst__end_of_records [color="#404040"];
}
